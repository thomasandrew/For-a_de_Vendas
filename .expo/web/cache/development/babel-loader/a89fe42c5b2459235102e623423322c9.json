{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport { NavigationHelpersContext, TabActions, useTheme } from '@react-navigation/native';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var pager = _ref.pager,\n      lazyPlaceholder = _ref.lazyPlaceholder,\n      _ref$tabBar = _ref.tabBar,\n      tabBar = _ref$tabBar === void 0 ? function (props) {\n    return React.createElement(MaterialTopTabBar, props);\n  } : _ref$tabBar,\n      tabBarOptions = _ref.tabBarOptions,\n      state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      rest = _objectWithoutProperties(_ref, [\"pager\", \"lazyPlaceholder\", \"tabBar\", \"tabBarOptions\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"]);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread(_objectSpread({}, tabBarOptions), props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderPager: pager,\n    renderLazyPlaceholder: lazyPlaceholder,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  })));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["tabBar","props","sceneContainerStyle","rest","colors","useTheme","renderTabBar","state","navigation","descriptors","index","TabActions","target","key","route","type","backgroundColor","background"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,OAAA,QAAA,uBAAA;AACA,SAAA,wBAAA,EAAA,UAAA,EAAA,QAAA,QAAA,0BAAA;AAOA,OAAA,iBAAA;AAeA,eAAe,SAAA,kBAAA,CAAA,IAAA,EAUL;AAAA,MAViC,KAUjC,GAAA,IAAA,CAViC,KAUjC;AAAA,MAViC,eAUjC,GAAA,IAAA,CAViC,eAUjC;AAAA,oBAAA,IAAA,CAPRA,MAOQ;AAAA,MAPRA,MAOQ,4BAPEC,UAAAA,KAAD;AAAA,WAAmC,KAAA,CAAA,aAAA,CAAA,iBAAA,EAHH,KAGG,CAAnC;AAAA,GAOD;AAAA,MAViC,aAUjC,GAAA,IAAA,CAViC,aAUjC;AAAA,MAViC,KAUjC,GAAA,IAAA,CAViC,KAUjC;AAAA,MAViC,UAUjC,GAAA,IAAA,CAViC,UAUjC;AAAA,MAViC,WAUjC,GAAA,IAAA,CAViC,WAUjC;AAAA,MAFRC,mBAEQ,GAAA,IAAA,CAFRA,mBAEQ;AAAA,MADLC,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,eAAA,EAAA,OAAA,EAAA,YAAA,EAAA,aAAA,EAAA,qBAAA,CAAA,CAAA;;AAAA,kBACWE,QAAnB,EADQ;AAAA,MACAD,MADA,aACAA,MADA;;AAGR,MAAME,YAAY,GAAIL,SAAhBK,YAAgBL,CAAAA,KAAD,EAA+B;AAClD,WAAOD,MAAM,CAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,aAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAGXO,MAAAA,KAAK,EAHM,KAAA;AAIXC,MAAAA,UAAU,EAJC,UAAA;AAKXC,MAAAA,WAAW,EAAEA;AALF,KAAA,CAAA,CAAb;AADF,GAAA;;AAUA,SACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AAAmC,IAAA,KAAK,EAAED;AAA1C,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,aAAa,EAAGE,uBAAAA,KAAD;AAAA,aACb,UAAU,CAAV,QAAA,CAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACKC,UAAU,CAAVA,MAAAA,CAAkBJ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EADvB,IACKI,CADL,CAAA,EAAA,EAAA,EAAA;AAEEC,QAAAA,MAAM,EAAEL,KAAK,CAACM;AAFhB,OAAA,CAAA,CADa;AAAA,KAFjB;AAQE,IAAA,WAAW,EAAE;AAAA,UAAGC,KAAH,SAAGA,KAAH;AAAA,aAAeL,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAR9B,MAQ8BA,EAAf;AAAA,KARf;AASE,IAAA,eAAe,EATjB,KAAA;AAUE,IAAA,YAAY,EAVd,YAAA;AAWE,IAAA,WAAW,EAXb,KAAA;AAYE,IAAA,qBAAqB,EAZvB,eAAA;AAaE,IAAA,YAAY,EAAE;AAAA,aAAM,UAAU,CAAV,IAAA,CAAgB;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAN;AAAA,KAbhB;AAcE,IAAA,UAAU,EAAE;AAAA,aAAM,UAAU,CAAV,IAAA,CAAgB;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAAhB,CAAN;AAAA,KAdd;AAeE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEZ,MAAM,CAACa;AAA1B,KADmB,EAAA,mBAAA;AAfvB,GAAA,CAAA,CADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}